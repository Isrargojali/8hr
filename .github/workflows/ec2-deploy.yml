name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  EC2_HOST: 3.109.209.75
  EC2_USERNAME: ec2-user
  DEPLOY_PATH: /home/ec2-user/arbob-tech-erp
  DOCKER_USERNAME: israrahmad
  API_URL: http://3.109.209.75:3000
  PUBLIC_URL: http://3.109.209.75

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push backend
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/arbob-tech-backend:latest
          build-args: |
            NODE_ENV=production
            PORT=3000
            HOST=0.0.0.0
            DATABASE_URL=postgresql://postgres:israr123@postgres:5432/Arbob?schema=public
            JWT_SECRET=hello123hdjmaKJGVSFFSKHKHSK
            HOST_URL=${{ env.API_URL }}
            CORS_ORIGIN=${{ env.PUBLIC_URL }}
            API_URL=${{ env.API_URL }}

      - name: Build and push frontend
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/arbob-tech-frontend:latest
          build-args: |
            REACT_APP_API_URL=${{ env.API_URL }}
            REACT_APP_BASE_URL=${{ env.API_URL }}
            REACT_APP_API_BASE_URL=${{ env.API_URL }}
            REACT_APP_BACKEND_URL=${{ env.API_URL }}
            PUBLIC_URL=${{ env.PUBLIC_URL }}
            NODE_ENV=production

      - name: Copy deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.new.yml"
          target: "${{ env.DEPLOY_PATH }}"
          strip_components: 0

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}

            # Login to Docker Hub
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin

            # Pull fresh images
            docker pull ${{ env.DOCKER_USERNAME }}/arbob-tech-backend:latest
            docker pull ${{ env.DOCKER_USERNAME }}/arbob-tech-frontend:latest

            # Stop and remove existing containers
            docker-compose -f docker-compose.new.yml down || true
            docker rm -f $(docker ps -aq) || true

            # Start services
            docker-compose -f docker-compose.new.yml up -d

            # Wait for services to start
            echo "Waiting for services to start..."
            sleep 45

            # Check backend logs
            echo "Backend logs:"
            docker logs arbob-backend-prod

            # Check if backend is running
            if ! docker ps | grep -q "arbob-backend-prod"; then
              echo "Backend container not running"
              docker logs arbob-backend-prod
              exit 1
            fi

            # Install curl in the backend container for health check
            docker exec arbob-backend-prod apk add --no-cache curl

            # Verify backend is responding
            echo "Checking backend health..."
            for i in {1..5}; do
              if docker exec arbob-backend-prod curl -f http://localhost:3000/api/health; then
                echo "Backend is healthy!"
                break
              fi
              if [ $i -eq 5 ]; then
                echo "Backend health check failed after 5 attempts"
                docker logs arbob-backend-prod
                exit 1
              fi
              echo "Retrying in 10 seconds..."
              sleep 10
            done

            # Check frontend configuration
            echo "Frontend configuration:"
            docker exec arbob-frontend-prod env | grep REACT_APP

            echo "Deployment completed successfully!"
            docker ps 