name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  EC2_HOST: 3.109.209.75
  EC2_USERNAME: ec2-user
  DEPLOY_PATH: /home/ec2-user/arbob-tech-erp
  DOCKER_USERNAME: israrahmad

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Generate version
        id: version
        run: |
          # Get latest tag or start at 1.0.0
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          # Remove 'v' prefix and increment patch version
          current_version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$current_version"
          new_patch=$((patch + 1))
          new_version="$major.$minor.$new_patch"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "Generated version: $new_version"

  ci:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend
          npm install
          cd ../frontend/arbob-tech-erp-crm
          npm install

      - name: Run backend tests
        run: |
          cd backend
          npm test || true

      - name: Run frontend tests
        run: |
          cd frontend/arbob-tech-erp-crm
          npm test || true

  build-and-push:
    needs: [ci, version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push backend
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/arbob-tech-backend:latest
            ${{ env.DOCKER_USERNAME }}/arbob-tech-backend:${{ needs.version.outputs.new_version }}

      - name: Build and push frontend
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/arbob-tech-frontend:latest
            ${{ env.DOCKER_USERNAME }}/arbob-tech-frontend:${{ needs.version.outputs.new_version }}

  create-release:
    needs: [build-and-push, version]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          release_name: Release v${{ needs.version.outputs.new_version }}
          body: |
            Automated release v${{ needs.version.outputs.new_version }}
            
            Images:
            - Backend: ${{ env.DOCKER_USERNAME }}/arbob-tech-backend:${{ needs.version.outputs.new_version }}
            - Frontend: ${{ env.DOCKER_USERNAME }}/arbob-tech-frontend:${{ needs.version.outputs.new_version }}
          draft: false
          prerelease: false

  deploy:
    needs: [create-release, version]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update docker-compose with version
        run: |
          sed -i "s|israrahmad/arbob-tech-backend:latest|${{ env.DOCKER_USERNAME }}/arbob-tech-backend:${{ needs.version.outputs.new_version }}|g" docker-compose.new.yml
          sed -i "s|israrahmad/arbob-tech-frontend:latest|${{ env.DOCKER_USERNAME }}/arbob-tech-frontend:${{ needs.version.outputs.new_version }}|g" docker-compose.new.yml

      - name: Create deployment directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p ${{ env.DEPLOY_PATH }}
            rm -f ${{ env.DEPLOY_PATH }}/docker-compose.new.yml
            rm -f ${{ env.DEPLOY_PATH }}/deploy.sh

      - name: Copy deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.new.yml,deploy.sh"
          target: "${{ env.DEPLOY_PATH }}"
          strip_components: 0

      - name: Deploy application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            chmod +x deploy.sh
            sudo ./deploy.sh

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            docker ps
            echo "Checking backend health..."
            curl -f http://localhost:3000/api/health || exit 1
            echo "Deployment verified successfully!"

  notify:
    needs: [deploy, version]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Deployment successful!"
            echo "Version: v${{ needs.version.outputs.new_version }}"
            echo "Frontend URL: http://${{ env.EC2_HOST }}"
            echo "Backend URL: http://${{ env.EC2_HOST }}:3000"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi 