// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String
  contact   String
  email     String   @unique
  position  String
  basicSalary Int      @default(0)
  status   Int     @default(1) // 1 for active, 0 for inactive
  salaries  Salary[] 
  attendance Attendance[]
  advanceSalaries AdvanceSalary[]
  employeeProjects ProjectEmployee[]  
  createdAt DateTime @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

enum SalaryStatus {
  PAID
  UNPAID
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH
  EASYPAISA
}

model Salary {
  id            Int           @id @default(autoincrement())
  employee      Employee      @relation(fields: [employeeId], references: [id])
  employeeId    Int
  month         String
  year          Int
  summary       Json     
  paymentMethod PaymentMethod
  status        SalaryStatus
  active        Int           @default(1) // 1 for active, 0 for inactive
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Attendance {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  date       DateTime
  status     AttendanceStatus 
}

enum AttendanceStatus {
  PRESENT
  ONLEAVE
  ABSENT
}

model Expense {
  id               Int              @id @default(autoincrement())
  name             String
  
  // expenseCategory  ExpenseCategory  @relation(fields: [expenseCategoryId], references: [id])
  // expenseCategoryId Int
  expenseCategory  ExpenseCategory?  @relation(fields: [expenseCategoryName], references: [name])
  expenseCategoryName String?
  currency         Currency         
  total            Float
  description      String
  reference        String
  status             Int         @default(1) // 1 for active, 0 for deleted/inactive
  createdAt     DateTime      @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
}

enum Currency {
  USD    
  EUR    
  GBP    
  INR    
  JPY    
  AUD    
  CAD    
  CNY  
  PKR 
}

model ExpenseCategory {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  description String
  expenses  Expense[] 
  status   Int     @default(1) // 1 for active, 0 for inactive
}

model Project {
  id                 Int         @id @default(autoincrement())
  projectName        String
  ownerName          String
  ownerEmail         String
  ownerNumber        String
  note               String?
  startDate          DateTime
  endDate            DateTime?
  amount            Float       
  tax               Float       
  taxPercentage     Float       
  amountAfterTax    Float       
  paidAmount        Float       
  remainingAmount   Float   
  bonus             Float       
  sharedBonus       Float       
  paidStatus        PaidStatus      
  projectStatus     ProjectStatus  
  platform          Platform       
  projectEmployees  ProjectEmployee[]
  status            Int             @default(1) // 1 for active, 0 for deleted/inactive
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([projectStatus, paidStatus]) 
  @@index([platform])    

}

model AdvanceSalary {
  id              Int      @id @default(autoincrement())
  employeeId      Int
  employee        Employee @relation(fields: [employeeId], references: [id])
  amount          Float
  remainingAmount Float
  date            DateTime
  description     String?  // Optional note/reason for the advance
  status          Int      @default(1) // 1 for active/pending, 0 for completed/paid
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([employeeId])
}

model ProjectEmployee {
  id            Int      @id @default(autoincrement())
  employee      Employee @relation(fields: [employeeId], references: [id])
  employeeId    Int
  project       Project  @relation(fields: [projectId], references: [id])
  projectId     Int
  bonusShare    Float    @default(0) 
  isActive      Int      @default(1)   
  status        Int      @default(1) // 1 for active, 0 for deleted/inactive
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([employeeId, projectId])    // Prevent duplicate assignments
  @@index([employeeId])               // For querying employee's projects
  @@index([projectId])                // For querying project's employees
}


enum PaidStatus {
  NOT_PAID
  PARTIAL_PAID
  PAID
}

enum Platform {
  UPWORK
  FIVER
  LINKEDIN
  WHATSAPP
  OTHER
}

enum ProjectStatus {
  ONGOING
  COMPLETE
}

enum Role {
  SUPER_ADMIN
  ADMIN
  FINANCE_MANAGER
  HR
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(ADMIN)
  status    Int      @default(1) // 1=active, 0=inactive
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


